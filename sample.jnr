let foldr f v xs = 
    if (null xs) then v 
    else f (hd xs) (foldr f v (tl xs)) 
        
let concat xs ys = foldr cons ys xs
        
let filter p = foldr (\x -> \xs -> if (p x) then cons x xs else xs) empty
        
let singleton x = cons x empty
        
let quicksort f xs =
    if (null xs) then xs else  
    let pivot = hd xs in
    let rest = tl xs in
    let lessThan = filter (\x -> f x < f pivot) rest in 
    let greaterThan = filter (\x -> f x > f pivot) rest in
    concat (concat (quicksort f lessThan) (singleton pivot)) (quicksort f greaterThan)
       