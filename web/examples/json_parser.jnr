val zero :: Parser a
let zero = mkParser (\inp -> [])

val item :: Parser Char
let item = mkParser (\inp -> if (null inp) then []
                             else (head inp, tail inp) : [])
 
val sat :: (Char -> Bool) -> Parser Char
let sat p = bind item (\x ->
              if p x then pure x else zero)
  
val char :: Char -> Parser Char
let char x = sat (\y -> x == y)
    
val mplus :: Parser a -> Parser a -> Parser a
let mplus p q = mkParser(\inp -> let ret = runParser p inp in
                                 if null ret then runParser q inp  
                                 else ret)
 
val many :: Parser a -> Parser (List a)
let many p = mplus (bind p (\x ->
             bind (many p) (\xs ->
             pure (x:xs)))) (pure [])
 
val many1 :: Parser a -> Parser (List a)
let many1 p = bind p (\x ->
              bind (many p) (\xs -> 
              pure (x:xs)))  
  
val sepBy :: Parser a -> Parser b -> Parser (List a)
let sepBy p sep = 
          mplus 
          (bind p (\x ->
                bind (many (bind sep (\s ->
                            bind p pure))) (\xs -> pure (x:xs)))) (pure [])
val not :: Bool -> Bool
let not x = if x then False else True

val string :: String -> Parser (List Char)
let string s = 
	let string' cs =  
      if null cs then pure []
      else let c   = head cs in
           let cs' = tail cs in
           bind (char c)      (\x1 ->
           bind (string' cs') (\x2 -> 
           pure (c:cs')))
    in string' (toCharList s)

val quotedString :: Parser (List Char)    
let quotedString = bind (char '"') (\x ->
                   bind (many (sat (\x -> not (x == '"')))) (\s ->
                   bind (char '"') (\y -> pure s)))

val jsonParser :: Parser Json
let jsonParser =
  let jsonValue =  
     bind quotedString (\k ->  
     bind (char ':')   (\c ->
     bind (mplus (fmap JsonValue quotedString) jsonParser) (\v -> pure (k, v)))) in             
  bind (string "{") (\x ->
  bind (sepBy jsonValue (string ", ")) (\xs ->
  bind (string "}") (\x -> pure (JsonNode xs)))) 
        
let main = runParser jsonParser (toCharList "{\"firstName\":\"John\", \"lastName\":\"Doe\", \"Child\":{\"firstName\":\"Bart\"}}")    
                
