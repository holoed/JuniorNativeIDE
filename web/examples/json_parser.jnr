val zero :: Parser a
let zero = mkParser (\inp -> [])

val item :: Parser Char
let item = mkParser (\inp -> if (nullStr inp) then []
                             else (headStr inp, tailStr inp) : [])
 
val sat :: (Char -> Bool) -> Parser Char
let sat p = item >>= (\x -> if p x then pure x else zero)
  
val char :: Char -> Parser Char
let char x = sat (\y -> x == y)
    
val mplus :: Parser a -> Parser a -> Parser a
let mplus p q = mkParser(\inp -> let ret = runParser p inp in
                                 if null ret then runParser q inp    
                                 else ret)

val delay :: (Unit -> Parser a) -> Parser a
let delay p = mkParser (\inp -> runParser(p())(inp))

val many :: Parser a -> Parser (List a) 
let many p =  
   let q = pure (:) <*> p <*> delay (\v -> many p) in
   mplus q (pure [])  
   
val sepBy :: Parser a -> Parser b -> Parser (List a)
let sepBy p sep = 
          mplus 
          (p >>= (\x ->
          (many (sep >>= (\s ->
           p >>= pure))) >>= (\xs -> pure (x:xs)))) (pure [])

val string :: String -> Parser (List Char)
let string s = 
	let string' cs =  
      if null cs then pure []
      else pure (:) <*> char (head cs) <*> string' (tail cs)  
    in string' (toCharList s) 

val quotedString :: Parser (List Char)     
let quotedString = (char '"') >>= (\x ->
                   (many (sat (\x -> x /= '"'))) >>= (\s ->
                   (char '"') >>= (\y -> pure s)))

val jsonParser :: Parser Json
let jsonParser =
  let jsonValue =  
     quotedString >>= (\k ->  
     (char ':') >>= (\c ->
     (mplus (fmap JsonValue quotedString) jsonParser) >>= (\v -> pure (k, v)))) in             
  (string "{") >>= (\x ->
  (sepBy jsonValue (string ", ")) >>= (\xs ->
  (string "}") >>= (\x -> pure (JsonNode xs)))) 
 
val parse :: String -> Json
let parse = fst . head . runParser jsonParser 
 
val main :: Json     
let main = parse "{\"firstName\":\"John\", \"lastName\":\"Doe\", \"Child\":{\"firstName\":\"Bart\"}}"

                
