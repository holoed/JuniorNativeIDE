
val rawData :: Async String
let rawData = httpGet "http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz"

val dataSet :: Async (List Int)
let dataSet = (bufferToIntList . decompress) <$> rawData  

val toIng :: Int -> List a -> List (List (a, a, a))
let toImg n s = 
  let sz = 28 in
  let s' = (take (sz*sz) . drop (16 + n*(sz*sz))) s in
  tail <$> split sz ((\x -> (x, x, x)) <$> s')
 
val hcat :: Semigroup a => List a -> List a -> List a 
let hcat xss yss = range (\r -> xss !! r <> yss !! r) 0 (length xss - 1)

val square :: Semigroup a => List b -> (b -> c -> List a) -> c -> List a
let square xs f s = 
  tail (hcat (f (xs !! 0) s) (f (xs !! 1) s) <> 
        hcat (f (xs !! 2) s) (f (xs !! 3) s))
        
let squares x1 x2 x3 x4 =  
    tail (hcat x1 x2 <> 
          hcat x3 x4)
          
let image s = squares (square [10, 14, 19, 15] toImg s)
                      (square [1, 32, 21, 26] toImg s)
                      (square [40, 21, 26, 32] toImg s)
                      (square [18, 22, 21, 32] toImg s)
  
let main = (display . image) <$> dataSet 


   