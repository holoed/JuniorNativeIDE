val columnDefs :: List String -> Json
let columnDefs = listToJson . (fmap (\x -> mapToJson (fromListToMap [("field", stringToJson x)])))  

val getData :: String -> Maybe Json
let getData = parseJson >=> 
              getJsonValue "quoteSummary" >=> 
              getJsonList "result" >=>
              listToMaybe

val createJsonGetter :: List String -> Json -> Maybe Json
let createJsonGetter = foldKliesli . (fmap getJsonValue)

val getSymbol :: Json -> Maybe Json 
let getSymbol = createJsonGetter ["price", "symbol"]

val getShortName :: Json -> Maybe Json  
let getShortName = createJsonGetter ["price", "shortName"]

val getPrice :: Json -> Maybe Json  
let getPrice = createJsonGetter ["price", "regularMarketPrice", "raw"]

val getCurrency :: Json -> Maybe Json  
let getCurrency = createJsonGetter ["price", "currencySymbol"]

val getPreviousClose :: Json -> Maybe Json 
let getPreviousClose = createJsonGetter ["summaryDetail", "previousClose", "raw"]

val getSector :: Json -> Maybe Json 
let getSector = createJsonGetter ["assetProfile", "sector"]

val toJsonMap :: List (a, b) -> Json 
let toJsonMap = mapToJson . fromListToMap  

val spotData :: Int -> String -> Maybe (String, String, String, Int, Double, Double, String)
let spotData i = getData >=> (\z ->    
                 pure (\symbol name sector price prevClose ccy -> 
                                                            ((fromJust (jsonToString symbol)),
                                                            (fromJust (jsonToString name)),
                                                            (fromJust (jsonToString sector)), 
                                                            i,
                                                            (fromJust (jsonToDouble price)),
                                                            (fromJust (jsonToDouble prevClose)),
                                                            (fromJust (jsonToString ccy)))) 
                      <*> (getSymbol z) 
                      <*> (getShortName z) 
                      <*> (getSector z)    
                      <*> (getPrice z)  
                      <*> (getPreviousClose z)      
                      <*> (getCurrency z))    
  
val jsonData :: String -> Async String  
let jsonData symbol =   
  httpGet ("https://query1.finance.yahoo.com/v10/finance/quoteSummary/" <> symbol <> "?modules=assetProfile,price,summaryDetail")

val extract :: Json -> (String, Int)
let extract x = (fromJust ((getJsonValue "symbol" >=> jsonToString) x), 
                 fromJust ((getJsonValue "quantity" >=> jsonToInt) x))

let tickers = (((<$>) extract) . flatten . maybeToList . (parseJson >=> getJsonList "stocks")) <$> 
              httpGet "https://holoed.github.io/stocks.json"

let main = tickers >>= (\ts ->
           (flatten <$> (fmap maybeToList <$> (sequenceA ((\(x, i) -> (jsonData >=> (pure . spotData i)) x) <$> ts)))))
           >>= renderTreeMap

    