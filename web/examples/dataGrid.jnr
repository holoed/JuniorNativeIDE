val columnDefs :: List String -> Json
let columnDefs = listToJson . (fmap (\x -> mapToJson (fromListToMap [("field", stringToJson x)])))  

val getData :: String -> Maybe Json
let getData = parseJson >=> 
              getJsonValue "quoteSummary" >=> 
              getJsonList "result" >=>
              listToMaybe

val createJsonGetter :: List String -> Json -> Maybe Json
let createJsonGetter = foldKliesli . (fmap getJsonValue)

val getShortName :: Json -> Maybe Json 
let getShortName = createJsonGetter ["price", "shortName"]

val getPrice :: Json -> Maybe Json 
let getPrice = createJsonGetter ["price", "regularMarketPrice", "raw"]

val getPreviousClose :: Json -> Maybe Json 
let getPreviousClose = createJsonGetter ["summaryDetail", "previousClose", "raw"]

val getSector :: Json -> Maybe Json 
let getSector = createJsonGetter ["assetProfile", "sector"]

val toJsonMap :: List (a, b) -> Json
let toJsonMap = mapToJson . fromListToMap

let dayGain currentPrice prevClose numShares = numShares * (currentPrice - prevClose)

val spotData :: Int -> String -> Maybe Json 
let spotData i = getData >=> (\z ->    
                 pure (\name sector price prevClose -> toJsonMap [("shortName", name), 
                                                      ("sector", sector), 
                                                      ("dayGain", fromJust (parseJson (show (dayGain (fromJust (jsonToDouble price)) 
                                                                          (fromJust (jsonToDouble prevClose)) (fromInteger i))))),
                                                      ("price", price), 
                                                      ("previousClose", prevClose)]) 
                      <*> (getShortName z)
                      <*> (getSector z)
                      <*> (getPrice z)
                      <*> (getPreviousClose z))
 
val jsonData :: String -> Async String
let jsonData symbol = 
  httpGet ("https://query1.finance.yahoo.com/v10/finance/quoteSummary/" <> symbol <> "?modules=assetProfile,price,summaryDetail")

val toData :: List Json -> Json
let toData x = 
  toJsonMap [
    ("columnDefs", columnDefs ["shortName", "sector", "dayGain"]),  
    ("rowData", listToJson x),
    ("defaultColDef", toJsonMap [
      ("sortable", stringToJson "true"),
      ("resizable", stringToJson "true")
    ])
  ]

val extract :: Json -> (String, Int)
let extract x = (fromJust ((getJsonValue "symbol" >=> jsonToString) x), 
                 fromJust ((getJsonValue "quantity" >=> jsonToInt) x))

let tickers = (((<$>) extract) . flatten . maybeToList . (parseJson >=> getJsonList "stocks")) <$> 
              httpGet "https://holoed.github.io/stocks.json"

val main :: Async Unit
let main = tickers >>= (\ts -> toData <$> (flatten <$> (fmap maybeToList <$> (sequenceA ((\(x, i) -> (jsonData >=> (pure . spotData i)) x) <$> ts))))) 
           >>= renderDataGrid