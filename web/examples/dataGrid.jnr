let columnDefs = listToJson . (fmap (\x -> mapToJson (fromListToMap [("field", stringToJson x)])))  

let getData = parseJson >=> 
              getJsonValue "quoteResponse" >=> 
              getJsonList "result"  

val jsonData :: String -> Async String
let jsonData symbol = 
  httpGet ("https://query1.finance.yahoo.com/v7/finance/quote?symbols=" <> symbol)

let toData x = 
  (mapToJson . fromListToMap) 
  [("columnDefs", columnDefs ["longName", "bid", "ask", "fiftyTwoWeekHigh", "fiftyTwoWeekLow"]),
   ("rowData", listToJson x),
   ("defaultColDef", (mapToJson . fromListToMap) [
   ("sortable", stringToJson "true"),
   ("resizable", stringToJson "true")])]

let tickers = "H,RKLB,AMAT,MPWR,AAPL,TSLA,AMD,MAR,NVDA,GOOGL,AVGO,LMT,QCOM,META,U,ETSY,TWTR,ARN.MI,G.MI"


let main = ((jsonData >=> (pure . fmap toData . getData)) tickers) >>= traverse renderDataGrid