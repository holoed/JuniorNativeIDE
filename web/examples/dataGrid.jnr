val columnDefs :: List String -> Json
let columnDefs = listToJson . (fmap (\x -> mapToJson (fromListToMap [("field", stringToJson x)])))  

val getData :: String -> Maybe Json
let getData = parseJson >=> 
              getJsonValue "quoteSummary" >=> 
              getJsonList "result" >=>
              listToMaybe

val createJsonGetter :: List String -> Json -> Maybe Json
let createJsonGetter = foldKliesli . (fmap getJsonValue)

val getShortName :: Json -> Maybe Json 
let getShortName = createJsonGetter ["price", "shortName"]

val getPrice :: Json -> Maybe Json 
let getPrice = createJsonGetter ["price", "regularMarketPrice", "raw"]

val getPreviousClose :: Json -> Maybe Json 
let getPreviousClose = createJsonGetter ["summaryDetail", "previousClose", "raw"]

val getSector :: Json -> Maybe Json 
let getSector = createJsonGetter ["assetProfile", "sector"]

val toJsonMap :: List (a, b) -> Json
let toJsonMap = mapToJson . fromListToMap

val spotData :: String -> Maybe Json 
let spotData = getData >=> (\z ->    
                 pure (\x y z w -> toJsonMap [("shortName", x), ("sector", y), ("price", z), ("previousClose", w)]) 
                      <*> (getShortName z)
                      <*> (getSector z)
                      <*> (getPrice z)
                      <*> (getPreviousClose z))
 
val jsonData :: String -> Async String
let jsonData symbol = 
  httpGet ("https://query1.finance.yahoo.com/v10/finance/quoteSummary/" <> symbol <> "?modules=assetProfile,price,summaryDetail")

val toData :: List Json -> Json
let toData x = 
  toJsonMap [
    ("columnDefs", columnDefs ["shortName", "sector", "price", "previousClose"]), 
    ("rowData", listToJson x),
    ("defaultColDef", toJsonMap [
      ("sortable", stringToJson "true"),
      ("resizable", stringToJson "true")
    ])
  ]

val tickers :: List String 
let tickers = ["H", "RKLB", "AMAT", "MPWR", "AI",
               "AAPL", "TSLA", "AMD", "MAR", 
               "NVDA", "GOOGL", "AVGO", "LMT", "QCOM", 
               "META", "U", "ETSY", "TWTR", "HAL", "APA", "GD", "MU"]

val main :: Async Unit
let main = toData <$> (flatten <$> (fmap maybeToList <$> (sequenceA ((jsonData >=> (pure . spotData)) <$> tickers)))) 
           >>= renderDataGrid