data ListF a b = Empty | Cons a b deriving Functor 

val toListAlg :: ListF a (List a) -> List a
let toListAlg v = 
   match v with
   | Empty -> []
   | Cons x xs -> x:xs 
            
val fromListAlg :: List a -> ListF a (List a)         
let fromListAlg xs = 
   if null xs then Empty
   else Cons (head xs) (tail xs)

val swap :: Ord a => ListF a (ListF a b) -> ListF a (ListF a b)
let swap v = if isEmpty v then Empty
             else let (x, y) = extractCons v in
             if isEmpty y then Cons x Empty 
             else let (x2, y2) = extractCons y in
             if x <= x2 then Cons x (Cons x2 y2)
             else Cons x2 (Cons x y2)

val sortList :: Ord a => Fix (ListF a) -> Fix (ListF a)
let sortList = anaRec (cataRec (fmap In . swap))

val fromList :: List a -> Fix (ListF a)
let fromList xs = anaRec fromListAlg xs

val toList :: Fix (ListF a) -> List a
let toList xs = cataRec toListAlg xs

val sort :: Ord a => List a -> List a
let sort = toList . sortList . fromList 

val main :: List Int
let main = sort [3,1,6,9,5,0]   