

val fromUnixTime :: Int -> Async String
let fromUnixTime time = 
  httpGet ("https://showcase.api.linx.twenty57.net/UnixTime/fromunix?timestamp=" <> show time)
  
val jsonData :: String -> Async String
let jsonData symbol = httpGet ("https://query1.finance.yahoo.com/v8/finance/chart/" <> symbol)

val getData :: String -> Maybe Json
let getData = parseJson >=> getJsonValue "chart" >=> getJsonList "result" >=> listToMaybe 

val getRec :: (Foldable a, Monad b) => (c -> d -> b d) -> a c -> d -> b d
let getRec f = foldr1 (flip (>=>)) . fmap f 

let getSymbol = getRec getJsonValue ["meta", "symbol"] >=> jsonToString  
 
val jsonListToTimestamps :: Maybe (List Json) -> Async (Maybe (List String))
let jsonListToTimestamps mxs = 
  sequenceA (mxs >>= (\xs -> fmap sequenceA ((fmap . fmap) (fromUnixTime) (traverse jsonToInt xs))))

val getTimeStamps :: String -> Async (Maybe (List String))
let getTimeStamps x = pure ((getData >=> getJsonList "timestamp") x) >>= jsonListToTimestamps

val getClose :: Json -> Maybe (List Double)      
let getClose = getJsonValue "indicators" >=> 
               getJsonList "quote" >=>  
               listToMaybe >=> 
               getJsonList "close" >=>
               traverse jsonToDouble   

val ticker :: String -> Async (List ((String, List String, List Double)))
let ticker symbol = jsonData symbol >>= (\x1 ->
               getTimeStamps x1 >>= (\x2 ->
               (pure ((getData >=> getClose) x1)) >>= (\x3 ->
               pure (maybeToList (pure (\x y -> (symbol, x, y)) <*> x2 <*> x3)))))
 
val main :: Async Unit
let main = ticker "^IXIC" >>= renderTimeSeries