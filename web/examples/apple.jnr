val jsonData :: Async String
let jsonData = httpGet "https://query1.finance.yahoo.com/v8/finance/chart/AAPL" 

val getData :: String -> Maybe Json
let getData = parseJson >=> 
              getJsonValue "chart" >=> 
              getJsonList "result" >=> 
              (Just . head) 
              
let getSymbol = getJsonValue "meta" >=> getJsonValue "symbol" >=> jsonToString  
  
val getClose :: Json -> Maybe (List Double)      
let getClose = getJsonValue "indicators" >=> 
               getJsonList "quote" >=>  
               (Just . head) >=> 
               getJsonList "close" >=>
               traverse jsonToDouble                
   
val getTimestamps :: Json -> Maybe (List String)
let getTimestamps v = 
  bind (getJsonList "timestamp" v)(\r -> 
  fmap (fmap timeStampToDate) (traverse jsonToInt r))  
 
val spotData :: String -> Maybe ((String, List String, List Double))
let spotData v = bind (getData v)(\z -> 
                 liftA3 (\x y z -> (x, y, z))
                        (getSymbol z)
                        (getTimestamps z)
                        (getClose z))
 
val main :: Async (Maybe Unit) 
let main =  flatten (fmap sequenceA (
            bind jsonData (\x -> 
            pure (bind (spotData x) (\(symbol, xs, ys) ->
            pure (renderTimeSeries (symbol, xs, ys)))))  
            ))
  