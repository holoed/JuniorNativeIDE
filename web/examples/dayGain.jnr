val columnDefs :: List String -> Json
let columnDefs = listToJson . (fmap (\x -> mapToJson (fromListToMap [("field", stringToJson x)])))  

val getData :: String -> Maybe Json
let getData = parseJson >=> 
              getJsonValue "quoteSummary" >=> 
              getJsonList "result" >=>
              listToMaybe

val createJsonGetter :: List String -> Json -> Maybe Json
let createJsonGetter = foldKliesli . (fmap getJsonValue)

val getShortName :: Json -> Maybe Json 
let getShortName = createJsonGetter ["price", "shortName"]

val getPrice :: Json -> Maybe Json 
let getPrice = createJsonGetter ["price", "regularMarketPrice", "raw"]

val getPreviousClose :: Json -> Maybe Json 
let getPreviousClose = createJsonGetter ["summaryDetail", "previousClose", "raw"]

val getSector :: Json -> Maybe Json 
let getSector = createJsonGetter ["assetProfile", "sector"]

val toJsonMap :: List (a, b) -> Json
let toJsonMap = mapToJson . fromListToMap

let dayGain currentPrice prevClose numShares = numShares * (currentPrice - prevClose)

val spotData :: Int -> String -> Maybe (String, Double)
let spotData i = getData >=> (\z ->    
                 pure (\name sector price prevClose -> (fromJust (jsonToString sector), 
                                                        dayGain (fromJust (jsonToDouble price)) 
                                                                (fromJust (jsonToDouble prevClose)) (fromInteger i)))
                      <*> (getShortName z)
                      <*> (getSector z)
                      <*> (getPrice z)
                      <*> (getPreviousClose z))
 
val jsonData :: String -> Async String 
let jsonData symbol = 
  httpGet ("https://query1.finance.yahoo.com/v10/finance/quoteSummary/" <> symbol <> "?modules=assetProfile,price,summaryDetail")

val extract :: Json -> (String, Int)
let extract x = (fromJust ((getJsonValue "symbol" >=> jsonToString) x), 
                 fromJust ((getJsonValue "quantity" >=> jsonToInt) x))

let tickers = (((<$>) extract) . flatten . maybeToList . (parseJson >=> getJsonList "stocks")) <$> 
              httpGet "https://holoed.github.io/stocks.json"

let filter p = foldr (\x xs -> if (p x) then x : xs else xs) []

val zeroNegatives :: List (String, Double) -> List (String, Double)
let zeroNegatives = fmap (\(x, y) -> (x, if (y < 0) then 0 - y else y)) . filter (\(x, y) -> y > 0)  

let main = tickers >>= (\ts ->
           unzip <$> 
           (zeroNegatives <$>
           (((<$>) (foldr1 (\(x1, y1) (x2, y2) -> (x1, (y1 + y2))))) <$> 
           ((groupBy (\(x1, y1) (x2, y2) -> x1 == x2)) <$> 
           (((sortBy (\(x1, y1) (x2, y2) -> x1 > x2)) <$> 
           (flatten <$> (fmap maybeToList <$> (sequenceA ((\(x, i) -> (jsonData >=> (pure . spotData i)) x) <$> ts))))))))))
           >>= (\(xs, ys) -> renderPieChart [("Day Gain", xs, ys)])
    