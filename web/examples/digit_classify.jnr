val one :: List (List Double)
let one = [[0, 0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 1, 0, 0, 0, 0], 
           [0, 0, 0, 1, 1, 0, 0, 0, 0],
           [0, 0, 1, 0, 1, 0, 0, 0, 0],
           [0, 0, 0, 0, 1, 0, 0, 0, 0],
           [0, 0, 0, 0, 1, 0, 0, 0, 0],
           [0, 0, 0, 0, 1, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0, 0]]
           
val two :: List (List Double)
let two = [[0, 0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 1, 1, 0, 0, 0, 0], 
           [0, 0, 1, 0, 0, 1, 0, 0, 0],
           [0, 0, 0, 0, 1, 0, 0, 0, 0], 
           [0, 0, 0, 1, 0, 0, 0, 0, 0],
           [0, 0, 1, 0, 0, 0, 0, 0, 0],
           [0, 0, 1, 1, 1, 1, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0, 0]]
           
val three :: List (List Double)
let three = [[0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 1, 1, 0, 0, 0, 0], 
             [0, 0, 1, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0, 0], 
             [0, 0, 0, 0, 1, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 1, 1, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0]]
           
val brain :: FeedForwardModel
let brain = feedForwardModel [81, 32, 16, 3]   

val inputTensor :: Tensor2D
let inputTensor = mkTensor2D [flatten one, flatten two, flatten three] 81

val outputTensor :: Tensor2D
let outputTensor = mkTensor2D [[1, 0, 0], [0, 1, 0], [0, 0, 1]] 3   

val trainedBrain :: Async TrainedFeedForwardModel
let trainedBrain = trainModel brain inputTensor outputTensor 1000 True  

val main :: Async (List (List Int))
let main = (((<$>)((<$>) round)) . tensor2DToArray . flip predict inputTensor) <$> trainedBrain                  